import os
import asyncio
import base64
import json
import time
import traceback
import uuid
import xml.etree.ElementTree as ET
from contextlib import asynccontextmanager
from datetime import datetime
from urllib.parse import quote

import httpx
import pandas as pd
import requests
import uvicorn
from dotenv import load_dotenv
from fastapi import (Body, FastAPI, File, HTTPException, Request, UploadFile,
                     WebSocket)
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import (HTMLResponse, JSONResponse, PlainTextResponse)
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel
from requests.auth import HTTPBasicAuth
from starlette.websockets import WebSocketDisconnect

# Load environment variables at the very beginning
load_dotenv()

# Import project-specific modules
from database.schemas import (CallStatus, Customer,
                              db_manager, init_database, update_call_status, get_call_session_by_sid)
from services.call_management import call_service
from utils import bedrock_client
from utils.agent_transfer import trigger_exotel_agent_transfer
from utils.handler_asr import SarvamHandler
from utils.redis_session import (init_redis, redis_manager,
                                 generate_websocket_session_id)


# --- Lifespan Management ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    print("ЁЯЪА Starting Voice Assistant Application...")
    
    # Initialize database
    if init_database():
        print("тЬЕ Database initialized successfully")
    else:
        print("тЭМ Database initialization failed")
    
    # Initialize Redis
    if init_redis():
        print("тЬЕ Redis initialized successfully")
    else:
        print("тЭМ Redis initialization failed - running without session management")
    
    print("ЁЯОЙ Application startup complete!")
    
    yield
    
    # Shutdown
    print("ЁЯЫС Shutting down Voice Assistant Application...")

app = FastAPI(
    title="Voice Assistant Call Management System",
    lifespan=lifespan
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

SARVAM_API_KEY = os.getenv("SARVAM_API_KEY")
sarvam_handler = SarvamHandler(SARVAM_API_KEY)

# --- Constants ---
BUFFER_DURATION_SECONDS = 1.0

# --- Multilingual Prompt Templates with SSML and Pauses ---
GREETING_TEMPLATE = {
    "en-IN": "Hello, this is Priya, calling on behalf of South India Finvest Bank. Am I speaking with Mr. {name}?",
    "hi-IN": "рдирдорд╕реНрддреЗ, рдореИрдВ рдкреНрд░рд┐рдпрд╛ рд╣реВрдВ, рдФрд░ рд╕рд╛рдЙрде рдЗрдВрдбрд┐рдпрд╛ рдлрд┐рдирд╡реЗрд╕реНрдЯ рдмреИрдВрдХ рдХреА рдУрд░ рд╕реЗ рдмрд╛рдд рдХрд░ рд░рд╣реА рд╣реВрдВред рдХреНрдпрд╛ рдореИрдВ рд╢реНрд░реА/рд╕реБрд╢реНрд░реА {name} рд╕реЗ рдмрд╛рдд рдХрд░ рд░рд╣реА рд╣реВрдВ?",
    "ta-IN": "ро╡рогроХрпНроХроорпН, роиро╛ройрпН рокро┐ро░ро┐ропро╛, роЗродрпБ роЪро╡рпБродрпН роЗроирпНродро┐ропро╛ роГрокро┐ройрпНро╡рпЖро╕рпНроЯрпН ро╡роЩрпНроХро┐ропро┐ро▓ро┐ро░рпБроирпНродрпБ роЕро┤рпИрокрпНрокрпБ. родро┐ро░рпБ/родро┐ро░рпБроородро┐ {name} рокрпЗроЪрпБроХро┐ро▒рпАро░рпНроХро│ро╛?",
    "te-IN": "р░╣р░▓р▒Л, р░ир▒Зр░ир▒Б р░кр▒Нр░░р░┐р░п р░ор░╛р░Яр▒Нр░▓р░╛р░бр▒Бр░др▒Бр░ир▒Нр░ир░╛р░ир▒Б, р░Зр░жр░┐ р░╕р▒Мр░др▒Н р░Зр░Вр░бр░┐р░пр░╛ р░лр░┐р░ир▒НтАМр░╡р▒Жр░╕р▒Нр░Яр▒Н р░мр▒Нр░пр░╛р░Вр░Хр▒Н р░ир▒Бр░Вр░бр░┐ р░Хр░╛р░▓р▒Н. р░ор░┐р░╕р▒Нр░Яр░░р▒Н/р░ор░┐р░╕р▒Жр░╕р▒Н {name} р░ор░╛р░Яр▒Нр░▓р░╛р░бр▒Бр░др▒Бр░ир▒Нр░ир░╛р░░р░╛?",
    "ml-IN": "р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В, р┤Юр┤╛р╡╗ р┤кр╡Нр┤░р┤┐р┤пр┤пр┤╛р┤гр╡Н, р┤╕р╡Чр┤др╡Нр┤др╡Н р┤Зр┤ир╡Нр┤др╡Нр┤п р┤лр┤┐р╡╗р┤╡р╡Жр┤╕р╡Нр┤▒р╡Нр┤▒р╡Н р┤мр┤╛р┤Щр╡Нр┤Хр┤┐р┤ир╡Нр┤▒р╡Ж р┤нр┤╛р┤Чр┤ор┤╛р┤пр┤╛р┤гр╡Н р┤╡р┤┐р┤│р┤┐р┤Ър╡Нр┤Ър┤др╡Н. {name} р┤Жр┤гр╡Л р┤╕р┤Вр┤╕р┤╛р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир┤др╡Н?",
    "gu-IN": "ркиркорк╕рлНркдрлЗ, рк╣рлБркВ рккрлНрк░рк┐ркпрк╛ ркЫрлБркВ, рк╕рк╛ркЙрке ркЗркирлНркбрк┐ркпрк╛ рклрк┐ркирк╡рлЗрк╕рлНркЯ ркмрлЗркВркХ ркдрк░рклркерлА ркмрлЛрк▓рлА рк░рк╣рлА ркЫрлБркВ. рк╢рлБркВ рк╣рлБркВ рк╢рлНрк░рлА {name} рк╕рк╛ркерлЗ рк╡рк╛ркд ркХрк░рлА рк░рк╣рлА ркЫрлБркВ?",
    "mr-IN": "рдирдорд╕реНрдХрд╛рд░, рдореА рдкреНрд░рд┐рдпрд╛ рдмреЛрд▓рдд рдЖрд╣реЗ, рд╕рд╛рдЙрде рдЗрдВрдбрд┐рдпрд╛ рдлрд┐рдирд╡реЗрд╕реНрдЯ рдмрдБрдХреЗрдХрдбреВрди. рдореА рд╢реНрд░реА {name} рд╢реА рдмреЛрд▓рдд рдЖрд╣реЗ рдХрд╛?",
    "bn-IN": "ржиржорж╕рзНржХрж╛рж░, ржЖржорж┐ ржкрзНрж░рж┐ржпрж╝рж╛, рж╕рж╛ржЙрже ржЗржирзНржбрж┐ржпрж╝рж╛ ржлрж┐ржиржнрзЗрж╕рзНржЯ ржмрзНржпрж╛ржВржХрзЗрж░ ржкржХрзНрж╖ ржерзЗржХрзЗ ржлрзЛржи ржХрж░ржЫрж┐ред ржЖржорж┐ ржХрж┐ {name} ржПрж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓ржЫрж┐?",
    "kn-IN": "р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░, р▓ир▓╛р▓ир│Б р▓кр│Нр▓░р▓┐р▓пр▓╛, р▓╕р│Мр▓др│Н р▓Зр▓Вр▓бр▓┐р▓пр▓╛ р▓лр▓┐р▓ир│НтАМр▓╡р│Жр▓╕р│Нр▓Яр│Н р▓мр│Нр▓пр▓╛р▓Вр▓Хр│НтАМр▓ир▓┐р▓Вр▓ж р▓Хр▓░р│Ж р▓ор▓╛р▓бр│Бр▓др│Нр▓др▓┐р▓жр│Нр▓жр│Зр▓ир│Ж. р▓ир▓╛р▓ир│Б р▓╢р│Нр▓░р▓┐ {name} р▓Ер▓╡р▓░р│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓ор▓╛р▓др▓ир▓╛р▓бр│Бр▓др│Нр▓др▓┐р▓жр│Нр▓жр│Зр▓ир│Жр▓╡р▓╛?",
    "pa-IN": "ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓, риорйИриВ рикрйНри░ри┐риЖ ри╣ри╛риВ, ри╕ри╛риКрие риЗрй░рибрйАриЖ рилри┐риири╡рйИри╕риЯ римрйИриВриХ ри╡рй▒ри▓рйЛриВ риЧрй▒ри▓ риХри░ ри░ри╣рйА ри╣ри╛риВред риХрйА риорйИриВ ри╕рйНри░рйА {name} риири╛ри▓ риЧрй▒ри▓ риХри░ ри░ри╣рйА ри╣ри╛риВ?",
    "or-IN": "рмирморм╕рнНрмХрм╛рм░, рморнБрмБ рмкрнНрм░рм┐рнЯрм╛, рм╕рм╛рмЙрмернН рмЗрмгрнНрмбрм┐рмЖ рмлрм┐рмирмнрнЗрм╖рнНрмЯ рммрнНрнЯрм╛рмЩрнНрмХрм░рнБ рмХрмерм╛рм╣рнБрмБрмЫрм┐ред рморнБрмБ {name} рм╕рм╣рм┐рмд рмХрмерм╛рм╣рнБрмБрмЫрм┐ рмХрм┐?",
}

EMI_DETAILS_PART1_TEMPLATE = {
    "en-IN": "Thank you. I am calling about your loan ending in {loan_id}, which has an outstanding EMI of тВ╣{amount} due on {due_date}. I understand payments can be delayed. I am here to help you avoid any further impact.",
    "hi-IN": "рдзрдиреНрдпрд╡рд╛рджред рдореИрдВ рдЖрдкрдХреЗ рд▓реЛрди (рдЕрдВрддрд┐рдо рдЪрд╛рд░ рдЕрдВрдХ {loan_id}) рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреЙрд▓ рдХрд░ рд░рд╣реА рд╣реВрдБ, рдЬрд┐рд╕рдХреА рдмрдХрд╛рдпрд╛ рдИрдПрдордЖрдИ тВ╣{amount} рд╣реИ, рдЬреЛ {due_date} рдХреЛ рджреЗрдп рд╣реИред рдореИрдВ рд╕рдордЭрддреА рд╣реВрдБ рдХрд┐ рднреБрдЧрддрд╛рди рдореЗрдВ рджреЗрд░реА рд╣реЛ рд╕рдХрддреА рд╣реИред рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБ рддрд╛рдХрд┐ рдЖрдЧреЗ рдХреЛрдИ рд╕рдорд╕реНрдпрд╛ рди рд╣реЛред",
    "ta-IN": "роиройрпНро▒ро┐. роЙроЩрпНроХро│рпН роХроЯройрпН (роХроЯрпИроЪро┐ роиро╛ройрпНроХрпБ роЗро▓роХрпНроХроЩрпНроХро│рпН {loan_id}) роХрпБро▒ро┐родрпНродрпБ роЕро┤рпИроХрпНроХро┐ро▒рпЗройрпН, роЕродро▒рпНроХро╛рой роиро┐ро▓рпБро╡рпИ EMI тВ╣{amount} {due_date} роЕройрпНро▒рпБ роЪрпЖро▓рпБродрпНрод ро╡рпЗрогрпНроЯро┐ропродрпБ роЙро│рпНро│родрпБ. родро╛роородроорпН роПро▒рпНрокроЯро▓ро╛роорпН роОройрпНрокродрпИ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНроХро┐ро▒рпЗройрпН. роорпЗро▓рпБроорпН рокро╛родро┐рокрпНрокрпБ роПро▒рпНрокроЯро╛рооро▓рпН роЙродро╡ роиро╛ройрпН роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН.",
    "te-IN": "р░зр░ир▒Нр░пр░╡р░╛р░жр░╛р░▓р▒Б. р░ор▒А р░░р▒Бр░гр░В ({loan_id} р░др▒Л р░ор▒Бр░Чр░┐р░╕р▒З) р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Хр░╛р░▓р▒Н р░Ър▒Зр░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ир▒Б, р░жр▒Ар░ир░┐р░Хр░┐ тВ╣{amount} EMI {due_date} р░ир░╛р░Яр░┐р░Хр░┐ р░мр░╛р░Хр▒Ар░Чр░╛ р░Йр░Вр░жр░┐. р░Ър▒Жр░▓р▒Нр░▓р░┐р░Вр░кр▒Бр░▓р▒Б р░Жр░▓р░╕р▒Нр░пр░В р░Хр░╛р░╡р░Ър▒Нр░Ър▒Б. р░ор░░р░┐р░Вр░д р░кр▒Нр░░р░нр░╛р░╡р░В р░▓р▒Зр░Хр▒Бр░Вр░бр░╛ р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░ир▒Зр░ир▒Б р░Зр░Хр▒Нр░Хр░б р░Йр░ир▒Нр░ир░╛р░ир▒Б.",
    "ml-IN": "р┤ир┤ир╡Нр┤жр┤┐. р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╡р┤╛р┤пр╡Нр┤к ({loan_id} р┤Ер┤╡р┤╕р┤╛р┤ир┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤и) р┤╕р┤Вр┤мр┤ир╡Нр┤зр┤┐р┤Ър╡Нр┤Ър╡Н р┤╡р┤┐р┤│р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б, р┤Ер┤др┤┐р┤ир╡Н тВ╣{amount} EMI {due_date} р┤ир╡Н р┤мр┤╛р┤Хр╡Нр┤Хр┤┐ р┤Йр┤гр╡Нр┤Яр╡Н. р┤кр┤гр┤ор┤Яр┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир┤др┤┐р╡╜ р┤╡р╡Ир┤Хр┤┐р┤кр╡Нр┤кр╡Лр┤Хр┤╛р┤В. р┤Хр╡Вр┤Яр╡Бр┤др╡╜ р┤кр╡Нр┤░р┤╢р╡Нр┤ир┤Щр╡Нр┤Щр╡╛ р┤Тр┤┤р┤┐р┤╡р┤╛р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Юр┤╛р╡╗ р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Зр┤╡р┤┐р┤Яр╡Ж р┤Йр┤гр╡Нр┤Яр╡Н.",
    "gu-IN": "ркЖркнрк╛рк░. рк╣рлБркВ ркдркорк╛рк░рк╛ рк▓рлЛрки ({loan_id}) рк╡рк┐рк╢рлЗ ркХрлЛрк▓ ркХрк░рлА рк░рк╣рлА ркЫрлБркВ, ркЬрлЗркорк╛ркВ тВ╣{amount} EMI {due_date} рк╕рлБркзрлА ркмрк╛ркХрлА ркЫрлЗ. ркЪрлБркХрк╡ркгрлАркорк╛ркВ рк╡рк┐рк▓ркВркм ркеркИ рк╢ркХрлЗ ркЫрлЗ. рк╡ркзрлБ ркЕрк╕рк░ркерлА ркмркЪрк╡рк╛ ркорк╛ркЯрлЗ рк╣рлБркВ ркЕрк╣рлАркВ ркЫрлБркВ.",
    "mr-IN": "рдзрдиреНрдпрд╡рд╛рдж. рдореА рддреБрдордЪреНрдпрд╛ рдХрд░реНрдЬ ({loan_id}) рд╡рд┐рд╖рдпреА рдХреЙрд▓ рдХрд░рдд рдЖрд╣реЗ, рдЬреНрдпрд╛рдЪреА тВ╣{amount} EMI {due_date} рд░реЛрдЬреА рдмрд╛рдХреА рдЖрд╣реЗ. рдкреЗрдореЗрдВрдЯрдордзреНрдпреЗ рдЙрд╢реАрд░ рд╣реЛрдК рд╢рдХрддреЛ. рдкреБрдвреАрд▓ рдкрд░рд┐рдгрд╛рдо рдЯрд╛рд│рдгреНрдпрд╛рд╕рд╛рдареА рдореА рдорджрддреАрд╕рд╛рдареА рдпреЗрдереЗ рдЖрд╣реЗ.",
    "bn-IN": "ржзржирзНржпржмрж╛ржж. ржЖржорж┐ ржЖржкржирж╛рж░ ржЛржг ({loan_id}) рж╕ржорзНржкрж░рзНржХрзЗ ржлрзЛржи ржХрж░ржЫрж┐, ржпрж╛рж░ тВ╣{amount} EMI {due_date} рждрж╛рж░рж┐ржЦрзЗ ржмрж╛ржХрж┐ ржЖржЫрзЗред ржкрзЗржорзЗржирзНржЯрзЗ ржжрзЗрж░рж┐ рж╣рждрзЗ ржкрж╛рж░рзЗред ржЖрж░ржУ рж╕ржорж╕рзНржпрж╛ ржПржбрж╝рж╛рждрзЗ ржЖржорж┐ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржПржЦрж╛ржирзЗ ржЖржЫрж┐ред",
    "kn-IN": "р▓зр▓ир│Нр▓пр▓╡р▓╛р▓жр▓Чр▓│р│Б. р▓ир▓┐р▓ор│Нр▓о р▓╕р▓╛р▓▓ ({loan_id}) р▓мр▓Чр│Нр▓Чр│Ж р▓Хр▓░р│Ж р▓ор▓╛р▓бр│Бр▓др│Нр▓др▓┐р▓жр│Нр▓жр│Зр▓ир│Ж, р▓Зр▓жр▓Хр│Нр▓Хр│Ж тВ╣{amount} EMI {due_date} р▓░р▓Вр▓жр│Б р▓мр▓╛р▓Хр▓┐ р▓Зр▓жр│Ж. р▓кр▓╛р▓╡р▓др▓┐р▓пр▓▓р│Нр▓▓р▓┐ р▓╡р▓┐р▓│р▓Вр▓мр▓╡р▓╛р▓Чр▓мр▓╣р│Бр▓жр│Б. р▓╣р│Жр▓Ър│Нр▓Ър▓┐р▓и р▓кр▓░р▓┐р▓гр▓╛р▓о р▓др▓кр│Нр▓кр▓┐р▓╕р▓▓р│Б р▓ир▓╛р▓ир│Б р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓▓р│Б р▓Зр▓▓р│Нр▓▓р▓┐р▓жр│Нр▓жр│Зр▓ир│Ж.",
    "pa-IN": "ризрй░риири╡ри╛риж. риорйИриВ ридрйБри╣ри╛рибрйЗ ри▓рйЛрии ({loan_id}) римри╛ри░рйЗ риХри╛ри▓ риХри░ ри░ри╣рйА ри╣ри╛риВ, риЬри┐ри╕ ри╡ри┐рй▒риЪ тВ╣{amount} EMI {due_date} ридрй▒риХ римриХри╛риЗриЖ ри╣рйИред ринрйБриЧридри╛рии ри╡ри┐рй▒риЪ рижрйЗри░рйА ри╣рйЛ ри╕риХрижрйА ри╣рйИ. ри╣рйЛри░ рикрйНри░ринри╛ри╡ ридрйЛриВ римриЪриг ри▓риИ риорйИриВ риЗрй▒риерйЗ ри╣ри╛риВред",
    "or-IN": "рмзрмирнНрнЯрммрм╛рмж. рморнБрмБ рмЖрмкрмгрмЩрнНрмХрм░ рмЛрмг ({loan_id}) рммрм┐рм╖рнЯрм░рнЗ рмХрмерм╛рм╣рнБрмБрмЫрм┐, рмпрм╛рм╣рм╛рм░ тВ╣{amount} EMI {due_date} рм░рнЗ рммрмХрм╛рнЯрм╛ рмЕрмЫрм┐ред рмжрнЗрнЯ рмжрнЗрммрм╛рм░рнЗ рммрм┐рм│рморнНрмм рм╣рнЗрммрм╛ рм╕рморнНрмнрмм. рмЕрмзрм┐рмХ рм╕рморм╕рнНрнЯрм╛ рм░рнЛрмХрм┐рммрм╛ рмкрм╛рмЗрмБ рморнБрмБ рмПрмарм╛рм░рнЗ рмЕрмЫрм┐ред"
}

EMI_DETAILS_PART2_TEMPLATE = {
    "en-IN": "Please note. If this EMI remains unpaid, it may be reported to the credit bureau, which can affect your credit score. Continued delay may also classify your account as delinquent, leading to penalty charges or collection notices.",
    "hi-IN": "рдХреГрдкрдпрд╛ рдзреНрдпрд╛рди рджреЗрдВред рдпрджрд┐ рдпрд╣ рдИрдПрдордЖрдИ рдмрдХрд╛рдпрд╛ рд░рд╣рддреА рд╣реИ, рддреЛ рдЗрд╕реЗ рдХреНрд░реЗрдбрд┐рдЯ рдмреНрдпреВрд░реЛ рдХреЛ рд░рд┐рдкреЛрд░реНрдЯ рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИ, рдЬрд┐рд╕рд╕реЗ рдЖрдкрдХрд╛ рдХреНрд░реЗрдбрд┐рдЯ рд╕реНрдХреЛрд░ рдкреНрд░рднрд╛рд╡рд┐рдд рд╣реЛ рд╕рдХрддрд╛ рд╣реИред рд▓рдЧрд╛рддрд╛рд░ рджреЗрд░реА рд╕реЗ рдЖрдкрдХрд╛ рдЦрд╛рддрд╛ рдбрд┐рдлреЙрд▓реНрдЯрд░ рдШреЛрд╖рд┐рдд рд╣реЛ рд╕рдХрддрд╛ рд╣реИ, рдЬрд┐рд╕рд╕реЗ рдкреЗрдирд▓реНрдЯреА рдпрд╛ рдХрд▓реЗрдХреНрд╢рди рдиреЛрдЯрд┐рд╕ рдЖ рд╕рдХрддреЗ рд╣реИрдВред",
    "ta-IN": "родропро╡рпБ роЪрпЖропрпНродрпБ роХро╡ройро┐роХрпНроХро╡рпБроорпН. роЗроирпНрод EMI роЪрпЖро▓рпБродрпНродрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ роОройрпНро▒ро╛ро▓рпН, роЕродрпБ роХро┐ро░рпЖроЯро┐роЯрпН рокрпНропрпВро░рпЛро╡рпБроХрпНроХрпБ родрпЖро░ро┐ро╡ро┐роХрпНроХрокрпНрокроЯро▓ро╛роорпН, роЗродрпБ роЙроЩрпНроХро│рпН роХро┐ро░рпЖроЯро┐роЯрпН ро╕рпНроХрпЛро░рпБроХрпНроХрпБ рокро╛родро┐рокрпНрокрпИ роПро▒рпНрокроЯрпБродрпНродрпБроорпН. родрпКроЯро░рпНроирпНрод родро╛роородроорпН роЙроЩрпНроХро│рпН роХрогроХрпНроХрпИ роХрпБро▒рпНро▒ро╡ро╛ро│ро┐ропро╛роХ ро╡роХрпИрокрпНрокроЯрпБродрпНродрпБроорпН, роЕрокро░ро╛родроорпН роЕро▓рпНро▓родрпБ ро╡роЪрпВро▓рпН роирпЛроЯрпНроЯрпАро╕рпН ро╡ро░ро▓ро╛роорпН.",
    "te-IN": "р░жр░пр░Ър▒Зр░╕р░┐ р░Чр░ор░ир░┐р░Вр░Ър░Вр░бр░┐. р░И EMI р░Ър▒Жр░▓р▒Нр░▓р░┐р░Вр░Ър░Хр░кр▒Лр░др▒З, р░Ер░жр░┐ р░Хр▒Нр░░р▒Жр░бр░┐р░Яр▒Н р░мр▒Нр░пр▒Вр░░р▒Лр░Хр▒Б р░ир░┐р░╡р▒Зр░жр░┐р░Вр░Ър░мр░бр░╡р░Ър▒Нр░Ър▒Б, р░Зр░жр░┐ р░ор▒А р░Хр▒Нр░░р▒Жр░бр░┐р░Яр▒Н р░╕р▒Нр░Хр▒Лр░░р▒НтАМр░ир▒Б р░кр▒Нр░░р░нр░╛р░╡р░┐р░др░В р░Ър▒Зр░пр░╡р░Ър▒Нр░Ър▒Б. р░Хр▒Кр░ир░╕р░╛р░Чр▒Бр░др▒Бр░ир▒Нр░и р░Жр░▓р░╕р▒Нр░пр░В р░╡р░▓р▒Нр░▓ р░ор▒А р░Цр░╛р░др░╛ р░бр░┐р░лр░╛р░▓р▒Нр░Яр▒НтАМр░Чр░╛ р░кр░░р░┐р░Чр░гр░┐р░Вр░Ър░мр░бр▒Бр░др▒Бр░Вр░жр░┐, р░Ьр░░р░┐р░ор░╛р░ир░╛р░▓р▒Б р░▓р▒Зр░жр░╛ р░╡р░╕р▒Вр░▓р▒Б р░ир▒Лр░Яр▒Ар░╕р▒Бр░▓р▒Б р░░р░╛р░╡р░Ър▒Нр░Ър▒Б.",
    "ml-IN": "р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤╢р╡Нр┤░р┤жр╡Нр┤зр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х. р┤И EMI р┤Ер┤Яр┤пр╡Нр┤Хр╡Нр┤Хр┤кр╡Нр┤кр╡Жр┤Яр┤╛р┤др╡Ж р┤кр╡Лр┤пр┤╛р╡╜, р┤Ер┤др╡Н р┤Хр╡Нр┤░р╡Жр┤бр┤┐р┤▒р╡Нр┤▒р╡Н р┤мр╡Нр┤пр╡Вр┤▒р╡Лр┤пр╡Нр┤Хр╡Нр┤Хр╡Н р┤▒р┤┐р┤кр╡Нр┤кр╡Лр╡╝р┤Яр╡Нр┤Яр╡Н р┤Ър╡Жр┤пр╡Нр┤пр┤кр╡Нр┤кр╡Жр┤Яр┤╛р┤В, р┤Зр┤др╡Н р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Хр╡Нр┤░р╡Жр┤бр┤┐р┤▒р╡Нр┤▒р╡Н р┤╕р╡Нр┤Хр╡Лр┤▒р┤┐р┤ир╡Ж р┤мр┤╛р┤зр┤┐р┤Хр╡Нр┤Хр╡Бр┤В. р┤др╡Бр┤Яр╡╝р┤Ър╡Нр┤Ър┤пр┤╛р┤п р┤╡р╡Ир┤Хр┤┐р┤кр╡Нр┤кр┤┐р┤Хр╡Нр┤Хр╡╜ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ер┤Хр╡Нр┤Хр╡Чр┤гр╡Нр┤Яр┤┐р┤ир╡Ж р┤бр┤┐р┤лр╡Лр╡╛р┤Яр╡Нр┤Яр╡Н р┤Жр┤пр┤┐ р┤Хр┤гр┤Хр╡Нр┤Хр┤╛р┤Хр╡Нр┤Хр╡Бр┤В, р┤кр┤┐р┤┤р┤пр╡Л р┤Хр┤▓р┤Хр╡Нр┤╖р╡╗ р┤ир╡Лр┤Яр╡Нр┤Яр╡Ар┤╕р╡Л р┤╡р┤░р┤╛р┤В.",
    "gu-IN": "ркорк╣рлЗрк░ркмрк╛ркирлА ркХрк░рлАркирлЗ ркирлЛркВркзрлЛ. ркЬрлЛ ркЖ EMI ркмрк╛ркХрлА рк░рк╣рлЗрк╢рлЗ, ркдрлЛ ркдрлЗ ркХрлНрк░рлЗркбрк┐ркЯ ркмрлНркпрлБрк░рлЛркирлЗ рк░рк┐рккрлЛрк░рлНркЯ ркеркИ рк╢ркХрлЗркЫрлЗ, ркЬрлЗ ркдркорк╛рк░рк╛ ркХрлНрк░рлЗркбрк┐ркЯ рк╕рлНркХрлЛрк░ркирлЗ ркЕрк╕рк░ ркХрк░рлА рк╢ркХрлЗркЫрлЗ. рк╕ркдркд рк╡рк┐рк▓ркВркмркерлА ркдркорк╛рк░рлБркВ ркЦрк╛ркдрлБркВ ркбрк┐рклрлЛрк▓рлНркЯ ркдрк░рлАркХрлЗ ркЧркгрк╛ркп рк╢ркХрлЗркЫрлЗ, ркжркВркб ркЕркерк╡рк╛ рк╡рк╕рлВрк▓рк╛ркд ркирлЛркЯрк┐рк╕ ркЖрк╡рлА рк╢ркХрлЗркЫрлЗ.",
    "mr-IN": "рдХреГрдкрдпрд╛ рд▓рдХреНрд╖рд╛рдд рдШреНрдпрд╛. рд╣реА EMI рдмрдХрд╛рдпрд╛ рд░рд╛рд╣рд┐рд▓реНрдпрд╛рд╕, рддреА рдХреНрд░реЗрдбрд┐рдЯ рдмреНрдпреБрд░реЛрд▓рд╛ рд░рд┐рдкреЛрд░реНрдЯ рдХреЗрд▓реА рдЬрд╛рдК рд╢рдХрддреЗ, рдЬреНрдпрд╛рдореБрд│реЗ рддреБрдордЪрд╛ рдХреНрд░реЗрдбрд┐рдЯ рд╕реНрдХреЛрд░ рдкреНрд░рднрд╛рд╡рд┐рдд рд╣реЛрдК рд╢рдХрддреЛ. рд╕рддрддрдЪреНрдпрд╛ рд╡рд┐рд▓рдВрдмрд╛рдореБрд│реЗ рддреБрдордЪреЗ рдЦрд╛рддреЗ рдбрд┐рдлреЙрд▓реНрдЯрд░ рдореНрд╣рдгреВрди рдШреЛрд╖рд┐рдд рдХреЗрд▓реЗ рдЬрд╛рдК рд╢рдХрддреЗ, рджрдВрдб рдХрд┐рдВрд╡рд╛ рд╡рд╕реБрд▓реА рдиреЛрдЯреАрд╕ рдпреЗрдК рд╢рдХрддреЗ.",
    "bn-IN": "ржжржпрж╝рж╛ ржХрж░рзЗ рж▓ржХрзНрж╖рзНржп ржХрж░рзБржи. ржПржЗ EMI ржмржХрзЗржпрж╝рж╛ ржерж╛ржХрж▓рзЗ, ржПржЯрж┐ ржХрзНрж░рзЗржбрж┐ржЯ ржмрзНржпрзБрж░рзЛрждрзЗ рж░рж┐ржкрзЛрж░рзНржЯ ржХрж░рж╛ рж╣рждрзЗ ржкрж╛рж░рзЗ, ржпрж╛ ржЖржкржирж╛рж░ ржХрзНрж░рзЗржбрж┐ржЯ рж╕рзНржХрзЛрж░ржХрзЗ ржкрзНрж░ржнрж╛ржмрж┐ржд ржХрж░рждрзЗ ржкрж╛рж░рзЗред ржХрзНрж░ржорж╛ржЧржд ржжрзЗрж░рж┐рждрзЗ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржбрж┐ржлрж▓рзНржЯ рж╣рж┐рж╕рж╛ржмрзЗ ржмрж┐ржмрзЗржЪрж┐ржд рж╣рждрзЗ ржкрж╛рж░рзЗ, ржЬрж░рж┐ржорж╛ржирж╛ ржмрж╛ рж╕ржВржЧрзНрж░рж╣рзЗрж░ ржирзЛржЯрж┐рж╢ ржЖрж╕рждрзЗ ржкрж╛рж░рзЗред",
    "kn-IN": "р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓Чр▓ор▓ир▓┐р▓╕р▓┐. р▓И EMI р▓кр▓╛р▓╡р▓др▓┐р▓пр▓╛р▓Чр▓жр│Ж р▓Зр▓жр│Нр▓жр▓░р│Ж, р▓Ер▓жр│Б р▓Хр│Нр▓░р│Жр▓бр▓┐р▓Яр│Н р▓мр│Нр▓пр│Вр▓░р│Лр▓Чр│Ж р▓╡р▓░р▓жр▓┐ р▓ор▓╛р▓бр▓мр▓╣р│Бр▓жр│Б, р▓Зр▓жр│Б р▓ир▓┐р▓ор│Нр▓о р▓Хр│Нр▓░р│Жр▓бр▓┐р▓Яр│Н р▓╕р│Нр▓Хр│Лр▓░р│НтАМр▓Чр│Ж р▓кр▓░р▓┐р▓гр▓╛р▓о р▓мр│Ар▓░р│Бр▓др│Нр▓др▓жр│Ж. р▓ир▓┐р▓░р▓Вр▓др▓░ р▓╡р▓┐р▓│р▓Вр▓мр▓жр▓┐р▓Вр▓ж р▓ир▓┐р▓ор│Нр▓о р▓Цр▓╛р▓др│Жр▓пр▓ир│Нр▓ир│Б р▓бр▓┐р▓лр▓╛р▓▓р│Нр▓Яр│Н р▓Ор▓Вр▓жр│Б р▓кр▓░р▓┐р▓Чр▓гр▓┐р▓╕р▓мр▓╣р│Бр▓жр│Б, р▓жр▓Вр▓б р▓Ер▓ер▓╡р▓╛ р▓╕р▓Вр▓Чр│Нр▓░р▓╣р▓гр▓╛ р▓╕р│Вр▓Ър▓ир│Жр▓Чр▓│р│Б р▓мр▓░р▓мр▓╣р│Бр▓жр│Б.",
    "pa-IN": "риХри┐ри░рикри╛ риХри░риХрйЗ ризри┐риЖрии рижри┐риУ. риЬрйЗ риЗри╣ EMI римриХри╛риЗриЖ ри░ри╣рй░рижрйА ри╣рйИ, ридри╛риВ риЗри╣риирйВрй░ риХри░рйИрибри┐риЯ римри┐риКри░рйЛ риирйВрй░ ри░ри┐рикрйЛри░риЯ риХрйАридри╛ риЬри╛ ри╕риХрижри╛ ри╣рйИ, риЬрйБри░риори╛риири╛ риири╛ри▓ ридрйБри╣ри╛рибри╛ риХри░рйИрибри┐риЯ ри╕риХрйЛри░ рикрйНри░ринри╛ри╡ри┐рид ри╣рйЛ ри╕риХрижри╛ ри╣рйИред ри▓риЧри╛ридри╛ри░ рижрйЗри░рйА риири╛ри▓ ридрйБри╣ри╛рибри╛ риЦри╛ридри╛ рибри┐рилрйМри▓риЯри░ риШрйЛри╕ри╝ри┐рид риХрйАридри╛ риЬри╛ ри╕риХрижри╛ ри╣рйИ, риЬрйБри░риори╛риири╛ риЬри╛риВ риХри▓рйИриХри╕ри╝рии риирйЛриЯри┐ри╕ риЖ ри╕риХрижрйЗ ри╣рииред",
    "or-IN": "рмжрнЯрм╛рмХрм░рм┐ рмзрнНрнЯрм╛рми рмжрм┐рмЕрмирнНрмдрнБ. рмПрм╣рм┐ EMI рммрмХрм╛рнЯрм╛ рм░рм╣рм┐рм▓рнЗ, рмПрм╣рм╛ рмХрнНрм░рнЗрмбрм┐рмЯрнН рммрнНрнЯрнБрм░рнЛрмХрнБ рм░рм┐рмкрнЛрм░рнНрмЯ рмХрм░рм╛рмпрм╛рмЗрмкрм╛рм░рнЗ, рмпрм╛рм╣рм╛ рмЖрмкрмгрмЩрнНрмХрм░ рмХрнНрм░рнЗрмбрм┐рмЯрнН рм╕рнНрмХрнЛрм░рмХрнБ рмкрнНрм░рмнрм╛рммрм┐рмд рмХрм░рм┐рмкрм╛рм░рнЗред рм▓рмЧрм╛рмдрм╛рм░ рммрм┐рм│рморнНрмм рмЖрмкрмгрмЩрнНрмХрм░ рмЦрм╛рмдрм╛рмХрнБ рмбрм┐рмлрм▓рнНрмЯрнН рмнрм╛рммрм░рнЗ рмШрнЛрм╖рмгрм╛ рмХрм░рм┐рмкрм╛рм░рнЗ, рмЬрм░рм┐рморм╛рмирм╛ рмХрм┐рморнНрммрм╛ рмХрм▓рнЗрмХрнНрм╕рмирнН рмирнЛрмЯрм┐рм╕рнН рмЖрм╕рм┐рмкрм╛рм░рнЗред"
}

AGENT_CONNECT_TEMPLATE = {
    "en-IN": "If you are facing difficulties, we have options like part payments or revised EMI plans. Would you like me to connect you to one of our agents to assist you better?",
    "hi-IN": "рдпрджрд┐ рдЖрдкрдХреЛ рдХрдард┐рдирд╛рдИ рд╣реЛ рд░рд╣реА рд╣реИ, рддреЛ рд╣рдорд╛рд░реЗ рдкрд╛рд╕ рдЖрдВрд╢рд┐рдХ рднреБрдЧрддрд╛рди рдпрд╛ рд╕рдВрд╢реЛрдзрд┐рдд рдИрдПрдордЖрдИ рдпреЛрдЬрдирд╛рдУрдВ рдЬреИрд╕реЗ рд╡рд┐рдХрд▓реНрдк рд╣реИрдВред рдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣реЗрдВрдЧреЗ рдХрд┐ рдореИрдВ рдЖрдкрдХреЛ рд╣рдорд╛рд░реЗ рдПрдЬреЗрдВрдЯ рд╕реЗ рдЬреЛрдбрд╝ рджреВрдВ, рддрд╛рдХрд┐ рд╡реЗ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХреЗрдВ?",
    "ta-IN": "роЙроЩрпНроХро│рпБроХрпНроХрпБ роЪро┐ро░роороорпН роЗро░рпБроирпНродро╛ро▓рпН, рокроХрпБродро┐ роХроЯрпНроЯрогроорпН роЕро▓рпНро▓родрпБ родро┐ро░рпБродрпНродрокрпНрокроЯрпНроЯ EMI родро┐роЯрпНроЯроЩрпНроХро│рпН рокрпЛройрпНро▒ ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпН роЙро│рпНро│рой. роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роОроЩрпНроХро│рпН роПроЬрпЖрогрпНроЯрпБроЯройрпН роЗрогрпИроХрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│ро╛?",
    "te-IN": "р░ор▒Ар░Хр▒Б р░Зр░мр▒Нр░мр░Вр░жр░┐ р░Йр░Вр░Яр▒З, р░нр░╛р░Ч р░Ър▒Жр░▓р▒Нр░▓р░┐р░Вр░кр▒Бр░▓р▒Б р░▓р▒Зр░жр░╛ р░╕р░╡р░░р░┐р░Вр░Ър░┐р░и EMI р░кр▒Нр░▓р░╛р░ир▒НтАМр░▓р▒Б р░╡р░Вр░Яр░┐ р░Ор░Вр░кр░┐р░Хр░▓р▒Б р░Йр░ир▒Нр░ир░╛р░пр░┐. р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░ор░╛ р░Пр░Ьр▒Жр░Вр░Яр▒НтАМр░ир▒Б р░Хр░▓р░┐р░кр░┐р░Вр░Ър░╛р░▓р░╛?",
    "ml-IN": "р┤ир┤┐р┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Н р┤мр╡Бр┤жр╡Нр┤зр┤┐р┤ор╡Бр┤Яр╡Нр┤Яр╡Н р┤Йр┤гр╡Нр┤Яр╡Жр┤Щр╡Нр┤Хр┤┐р╡╜, р┤нр┤╛р┤Чр┤┐р┤Х р┤кр┤гр┤ор┤Яр┤пр╡Нр┤Хр╡Нр┤Хр╡╜ р┤Ер┤▓р╡Нр┤▓р╡Жр┤Щр╡Нр┤Хр┤┐р╡╜ р┤кр╡Бр┤др╡Бр┤Хр╡Нр┤Хр┤┐р┤п EMI р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛ р┤кр╡Лр┤▓р╡Бр┤│р╡Нр┤│ р┤Ур┤кр╡Нр┤╖р┤ир╡Бр┤Хр╡╛ р┤Юр┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Бр┤гр╡Нр┤Яр╡Н. р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Ж р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Юр┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Пр┤Ьр┤ир╡Нр┤▒р╡Бр┤ор┤╛р┤пр┤┐ р┤мр┤ир╡Нр┤зр┤┐р┤кр╡Нр┤кр┤┐р┤Хр╡Нр┤Хр┤гр╡Л?",
    "gu-IN": "ркЬрлЛ ркдркоркирлЗ ркорлБрк╢рлНркХрлЗрк▓рлА рк╣рлЛркп, ркдрлЛ ркЕркорк╛рк░рлА рккрк╛рк╕рлЗ ркнрк╛ркЧ ркЪрлБркХрк╡ркгрлА ркЕркерк╡рк╛ рк╕рлБркзрк╛рк░рлЗрк▓рлА EMI ркпрлЛркЬркирк╛ркУ ркЬрлЗрк╡рк╛ рк╡рк┐ркХрк▓рлНрккрлЛ ркЫрлЗ. рк╢рлБркВ рк╣рлБркВ ркдркоркирлЗ ркЕркорк╛рк░рк╛ ркПркЬркирлНркЯ рк╕рк╛ркерлЗ ркЬрлЛркбрлБркВ?",
    "mr-IN": "рддреБрдореНрд╣рд╛рд▓рд╛ рдЕрдбрдЪрдг рдЕрд╕рд▓реНрдпрд╛рд╕, рдЖрдордЪреНрдпрд╛рдХрдбреЗ рднрд╛рдЧ рдкреЗрдореЗрдиреНрдЯ рдХрд┐рдВрд╡рд╛ рд╕реБрдзрд╛рд░рд┐рдд EMI рдпреЛрдЬрдирд╛ рдЖрд╣реЗрдд. рдореА рддреБрдореНрд╣рд╛рд▓рд╛ рдЖрдордЪреНрдпрд╛ рдПрдЬрдВрдЯрд╢реА рдЬреЛрдбреВ рдХрд╛?",
    "bn-IN": "ржЖржкржирж╛рж░ ржЕрж╕рзБржмрж┐ржзрж╛ рж╣рж▓рзЗ, ржЖржорж╛ржжрзЗрж░ ржХрж╛ржЫрзЗ ржЖржВрж╢рж┐ржХ ржкрзЗржорзЗржирзНржЯ ржмрж╛ рж╕ржВрж╢рзЛржзрж┐ржд EMI ржкрзНрж▓рзНржпрж╛ржирзЗрж░ ржорждрзЛ ржмрж┐ржХрж▓рзНржк рж░ржпрж╝рзЗржЫрзЗред ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржЖржорж╛ржжрзЗрж░ ржПржЬрзЗржирзНржЯрзЗрж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ ржХрж░ржм?",
    "kn-IN": "р▓ир▓┐р▓ор▓Чр│Ж р▓др│Кр▓Вр▓жр▓░р│Ж р▓Зр▓жр│Нр▓жр▓░р│Ж, р▓нр▓╛р▓Ч р▓кр▓╛р▓╡р▓др▓┐ р▓Ер▓ер▓╡р▓╛ р▓кр▓░р▓┐р▓╖р│Нр▓Хр│Гр▓д EMI р▓пр│Лр▓Ьр▓ир│Жр▓Чр▓│р│В р▓ир▓ор│Нр▓о р▓мр▓│р▓┐ р▓Зр▓╡р│Ж. р▓ир▓┐р▓ор▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓▓р│Б р▓ир▓ор│Нр▓о р▓Пр▓Ьр│Жр▓Вр▓Яр│НтАМр▓Чр│Ж р▓╕р▓Вр▓кр▓░р│Нр▓Х р▓ор▓╛р▓бр▓мр│Зр▓Хр│Ж?",
    "pa-IN": "риЬрйЗ ридрйБри╣ри╛риирйВрй░ риорйБри╕ри╝риХри▓ риЖ ри░ри╣рйА ри╣рйИ, ридри╛риВ ри╕ри╛рибрйЗ риХрйЛри▓ ри╣ри┐рй▒ри╕ри╛ ринрйБриЧридри╛рии риЬри╛риВ ри╕рйЛризрйА EMI рипрйЛриЬриири╛ри╡ри╛риВ ри╡ри░риЧрйЗ ри╡ри┐риХри▓рик ри╣рииред риХрйА риорйИриВ ридрйБри╣ри╛риирйВрй░ ри╕ри╛рибрйЗ риПриЬрй░риЯ риири╛ри▓ риЬрйЛрйЬри╛риВ?",
    "or-IN": "рмпрмжрм┐ рмЖрмкрмгрмЩрнНрмХрнБ рм╕рморм╕рнНрнЯрм╛ рм╣рнЗрмЙрмЫрм┐, рмЖрмо рмкрм╛рмЦрм░рнЗ рмЕрмВрм╢рм┐рмХ рмкрнЗрморнЗрмгрнНрмЯ рмХрм┐рморнНрммрм╛ рм╕рмВрм╢рнЛрмзрм┐рмд EMI рмпрнЛрмЬрмирм╛ рмЕрмЫрм┐ред рмЖрмкрмгрмЩрнНрмХрнБ рм╕рм╣рмпрнЛрмЧ рмХрм░рм┐рммрм╛ рмкрм╛рмЗрмБ рмЖрмо рмПрмЬрнЗрмгрнНрмЯ рм╕рм╣рм┐рмд рмпрнЛрмЧрм╛рмпрнЛрмЧ рмХрм░рм┐рммрм┐?"
}

GOODBYE_TEMPLATE = {
    "en-IN": "I understand. If you change your mind, please call us back. Thank you. Goodbye.",
    "hi-IN": "рдореИрдВ рд╕рдордЭрддреА рд╣реВрдБред рдпрджрд┐ рдЖрдк рдЕрдкрдирд╛ рд╡рд┐рдЪрд╛рд░ рдмрджрд▓рддреЗ рд╣реИрдВ, рддреЛ рдХреГрдкрдпрд╛ рд╣рдореЗрдВ рд╡рд╛рдкрд╕ рдХреЙрд▓ рдХрд░реЗрдВред рдзрдиреНрдпрд╡рд╛рджред рдЕрд▓рд╡рд┐рджрд╛ред",
    "ta-IN": "роиро╛ройрпН рокрпБро░ро┐роирпНродрпБроХрпКро│рпНроХро┐ро▒рпЗройрпН. роирпАроЩрпНроХро│рпН роЙроЩрпНроХро│рпН рооройродрпИ рооро╛ро▒рпНро▒ро┐ройро╛ро▓рпН, родропро╡рпБроЪрпЖропрпНродрпБ роОроЩрпНроХро│рпИ роорпАрогрпНроЯрпБроорпН роЕро┤рпИроХрпНроХро╡рпБроорпН. роиройрпНро▒ро┐. ро╡ро┐роЯрпИрокрпЖро▒рпБроХро┐ро▒рпЗройрпН.",
    "te-IN": "р░ир░╛р░Хр▒Б р░Ер░░р▒Нр░ер░ор▒Ир░Вр░жр░┐. р░ор▒Ар░░р▒Б р░ор▒А р░Ер░нр░┐р░кр▒Нр░░р░╛р░пр░╛р░ир▒Нр░ир░┐ р░ор░╛р░░р▒Нр░Ър▒Бр░Хр▒Бр░Вр░Яр▒З, р░жр░пр░Ър▒Зр░╕р░┐ р░ор░ор▒Нр░ор░▓р▒Нр░ир░┐ р░др░┐р░░р░┐р░Чр░┐ р░Хр░╛р░▓р▒Н р░Ър▒Зр░пр░Вр░бр░┐. р░зр░ир▒Нр░пр░╡р░╛р░жр░╛р░▓р▒Б. р░╡р▒Ар░бр▒Нр░Хр▒Лр░▓р▒Б.",
    "ml-IN": "р┤Юр┤╛р╡╗ р┤ор┤ир┤╕р╡Нр┤╕р┤┐р┤▓р┤╛р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б. р┤ир┤┐р┤Щр╡Нр┤Щр╡╛ р┤Ер┤нр┤┐р┤кр╡Нр┤░р┤╛р┤пр┤В р┤ор┤╛р┤▒р╡Нр┤▒р┤┐р┤пр┤╛р╡╜, р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤Юр┤Щр╡Нр┤Щр┤│р╡Ж р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╡р┤┐р┤│р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х. р┤ир┤ир╡Нр┤жр┤┐. р┤╡р┤┐р┤Я.",
    "gu-IN": "рк╣рлБркВ рк╕ркоркЬрлБркВ ркЫрлБркВ. ркЬрлЛ ркдркорлЗ ркдркорк╛рк░рлЛ ркорки ркмркжрк▓рлЛ, ркдрлЛ ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркЕркоркирлЗ рккрк╛ркЫрк╛ ркХрлЛрк▓ ркХрк░рлЛ. ркЖркнрк╛рк░. ркЕрк▓рк╡рк┐ркжрк╛.",
    "mr-IN": "рдореА рд╕рдордЬрддреЗ. рддреБрдореНрд╣реА рддреБрдордЪрд╛ рдирд┐рд░реНрдгрдп рдмрджрд▓рд▓реНрдпрд╛рд╕, рдХреГрдкрдпрд╛ рдЖрдореНрд╣рд╛рд▓рд╛ рдкреБрдиреНрд╣рд╛ рдХреЙрд▓ рдХрд░рд╛. рдзрдиреНрдпрд╡рд╛рдж. рдЧреБрдбрдмрд╛рдп.",
    "bn-IN": "ржЖржорж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░ржЫрж┐. ржЖржкржирж┐ ржпржжрж┐ ржоржд ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЗржи, ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржорж╛ржжрзЗрж░ ржЖржмрж╛рж░ ржХрж▓ ржХрж░рзБржиред ржзржирзНржпржмрж╛ржжред ржмрж┐ржжрж╛ржпрж╝ред",
    "kn-IN": "р▓ир▓╛р▓ир│Б р▓Ер▓░р│Нр▓ер▓ор▓╛р▓бр▓┐р▓Хр│Кр▓Вр▓бр│Ж. р▓ир│Ар▓╡р│Б р▓ир▓┐р▓ор│Нр▓о р▓Ер▓нр▓┐р▓кр│Нр▓░р▓╛р▓пр▓╡р▓ир│Нр▓ир│Б р▓мр▓жр▓▓р▓╛р▓пр▓┐р▓╕р▓┐р▓жр▓░р│Ж, р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ир▓ор▓Чр│Ж р▓ор▓др│Нр▓др│Ж р▓Хр▓░р│Ж р▓ор▓╛р▓бр▓┐. р▓зр▓ир│Нр▓пр▓╡р▓╛р▓жр▓Чр▓│р│Б. р▓╡р▓┐р▓жр▓╛р▓п.",
    "pa-IN": "риорйИриВ ри╕риориЭрижрйА ри╣ри╛риВ. риЬрйЗ ридрйБри╕рйАриВ риЖрикригри╛ риории римрижри▓рйЛ, ридри╛риВ риХри┐ри░рикри╛ риХри░риХрйЗ ри╕ри╛риирйВрй░ риорйБрйЬ риХри╛ри▓ риХри░рйЛред ризрй░риири╡ри╛рижред риЕри▓ри╡ри┐рижри╛ред",
    "or-IN": "рморнБрмБ рммрнБрмЭрм┐рмерм┐рм▓рнЗ. рмпрмжрм┐ рмЖрмкрмг рморми рммрмжрм│рм╛рмирнНрмдрм┐, рмжрнЯрм╛рмХрм░рм┐ рмЖрмормХрнБ рмкрнБрмгрм┐ рмХрм▓рнН рмХрм░рмирнНрмдрнБред рмзрмирнНрнЯрммрм╛рмжред рммрм┐рмжрм╛рнЯред"
}

# --- TTS & Audio Helper Functions ---

async def play_transfer_to_agent(websocket, customer_number: str):
    print("play_transfer_to_agent")
    transfer_text = (
        "Please wait, we are transferring the call to an agent."
    )
    print("[Sarvam TTS] ЁЯФБ Converting agent transfer prompt")
    # Using 'en-IN' for transfer prompt for consistency, but could be `call_detected_lang`
    audio_bytes = await sarvam_handler.synthesize_tts("Please wait, we are transferring the call to an agent.", "en-IN")
    print("[Sarvam TTS] ЁЯУв Agent transfer audio generated")

    await stream_audio_to_websocket(websocket, audio_bytes)

    print("[Exotel] ЁЯУЮ Initiating agent call transfer")
    # The AGENT_NUMBER should be loaded from environment variables
    agent_number = os.getenv("AGENT_PHONE_NUMBER")
    if customer_number and agent_number:
        await trigger_exotel_agent_transfer(customer_number, agent_number)
    else:
        print("[ERROR] Could not initiate agent transfer. Missing customer_number or agent_number.")


async def stream_audio_to_websocket(websocket, audio_bytes):
    CHUNK_SIZE = 8000  # Send 1 second of audio at a time
    if not audio_bytes:
        print("[stream_audio_to_websocket] тЭМ No audio bytes to stream.")
        return
    for i in range(0, len(audio_bytes), CHUNK_SIZE):
        chunk = audio_bytes[i:i + CHUNK_SIZE]
        if not chunk:
            continue
        b64_chunk = base64.b64encode(chunk).decode("utf-8")
        response_msg = {
            "event": "media",
            "media": {"payload": b64_chunk}
        }
        await websocket.send_json(response_msg)
        await asyncio.sleep(float(CHUNK_SIZE) / 16000.0) # Sleep for the duration of the audio chunk

async def greeting_template_play(websocket, customer_info, lang: str):
    """Plays the personalized greeting in the detected language."""
    print("greeting_template_play")
    greeting = GREETING_TEMPLATE.get(lang, GREETING_TEMPLATE["en-IN"]).format(name=customer_info.get('name', 'there'))
    print(f"[Sarvam TTS] ЁЯФБ Converting personalized greeting: {greeting}")
    audio_bytes = await sarvam_handler.synthesize_tts(greeting, lang)
    await stream_audio_to_websocket(websocket, audio_bytes)

async def play_did_not_hear_response(websocket, lang: str):
    """Plays a prompt when the initial response is not heard."""
    prompt_text = "I'm sorry, I didn't hear your response. This call is regarding your loan account. If this is a convenient time to talk, please say 'yes'."
    print(f"[Sarvam TTS] ЁЯФБ Converting 'didn't hear' prompt: {prompt_text}")
    audio_bytes = await sarvam_handler.synthesize_tts(prompt_text, lang)
    await stream_audio_to_websocket(websocket, audio_bytes)

async def play_emi_details_part1(websocket, customer_info, lang: str):
    """Plays the first part of EMI details."""
    prompt_text = EMI_DETAILS_PART1_TEMPLATE.get(
        lang, EMI_DETAILS_PART1_TEMPLATE["en-IN"]
    ).format(
        loan_id=customer_info.get('loan_id', 'XXXX'),
        amount=customer_info.get('amount', 'a certain amount'),
        due_date=customer_info.get('due_date', 'a recent date')
    )
    print(f"[Sarvam TTS] ЁЯФБ Converting EMI part 1: {prompt_text}")
    audio_bytes = await sarvam_handler.synthesize_tts(prompt_text, lang)
    await stream_audio_to_websocket(websocket, audio_bytes)

async def play_emi_details_part2(websocket, customer_info, lang: str):
    """Plays the second part of EMI details."""
    prompt_text = EMI_DETAILS_PART2_TEMPLATE.get(lang, EMI_DETAILS_PART2_TEMPLATE["en-IN"])
    print(f"[Sarvam TTS] ЁЯФБ Converting EMI part 2: {prompt_text}")
    audio_bytes = await sarvam_handler.synthesize_tts(prompt_text, lang)
    await stream_audio_to_websocket(websocket, audio_bytes)

async def play_agent_connect_question(websocket, lang: str):
    """Asks the user if they want to connect to a live agent."""
    prompt_text = AGENT_CONNECT_TEMPLATE.get(lang, AGENT_CONNECT_TEMPLATE["en-IN"])
    print(f"[Sarvam TTS] ЁЯФБ Converting agent connect question: {prompt_text}")
    audio_bytes = await sarvam_handler.synthesize_tts(prompt_text, lang)
    await stream_audio_to_websocket(websocket, audio_bytes)

async def play_goodbye_after_decline(websocket, lang: str):
    """Plays a goodbye message if the user declines agent connection."""
    prompt_text = GOODBYE_TEMPLATE.get(lang, GOODBYE_TEMPLATE["en-IN"])
    print(f"[Sarvam TTS] ЁЯФБ Converting goodbye after decline: {prompt_text}")
    audio_bytes = await sarvam_handler.synthesize_tts(prompt_text, lang)
    await stream_audio_to_websocket(websocket, audio_bytes)

# --- Language and Intent Detection ---
def _is_devanagari(text): return any('\u0900' <= ch <= '\u097F' for ch in text)
def _is_tamil(text): return any('\u0B80' <= ch <= '\u0BFF' for ch in text)
def _is_telugu(text): return any('\u0C00' <= ch <= '\u0C7F' for ch in text)
def _is_kannada(text): return any('\u0C80' <= ch <= '\u0CFF' for ch in text)
def _is_malayalam(text): return any('\u0D00' <= ch <= '\u0D7F' for ch in text)
def _is_gujarati(text): return any('\u0A80' <= ch <= '\u0AFF' for ch in text)
def _is_marathi(text): return any('\u0900' <= ch <= '\u097F' for ch in text)
def _is_bengali(text): return any('\u0980' <= ch <= '\u09FF' for ch in text)
def _is_punjabi(text): return any('\u0A00' <= ch <= '\u0A7F' for ch in text)
def _is_oriya(text): return any('\u0B00' <= ch <= '\u0B7F' for ch in text)

def _is_gurmukhi(text):
    """Checks if the text contains any Gurmukhi characters (for Punjabi)."""
    return any('\u0A00' <= char <= '\u0A7F' for char in text)

def detect_language(text):
    text = text.strip().lower()
    if any(word in text for word in ["рдирдорд╕реНрддреЗ", "рд╣рд╛рдВ", "рдирд╣реАрдВ"]) or _is_devanagari(text): return "hi-IN"
    if any(word in text for word in ["ро╡рогроХрпНроХроорпН", "роЖроорпН", "роЗро▓рпНро▓рпИ"]) or _is_tamil(text): return "ta-IN"
    if any(word in text for word in ["р░╣р░╛р░пр▒Н", "р░Ер░╡р▒Бр░ир▒Б", "р░Хр░╛р░жр▒Б"]) or _is_telugu(text): return "te-IN"
    if any(word in text for word in ["р▓╣р│Жр▓▓р│Л", "р▓╣р│Мр▓жр│Б", "р▓Зр▓▓р│Нр▓▓"]) or _is_kannada(text): return "kn-IN"
    if any(word in text for word in ["р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В", "р┤Ер┤др╡Ж", "р┤Зр┤▓р╡Нр┤▓"]) or _is_malayalam(text): return "ml-IN"
    if any(word in text for word in ["ркиркорк╕рлНркдрлЗ", "рк╣рк╛", "ркирк╛"]) or _is_gujarati(text): return "gu-IN"
    if any(word in text for word in ["рдирдорд╕реНрдХрд╛рд░", "рд╣реЛрдп", "рдирд╛рд╣реА"]) or _is_marathi(text): return "mr-IN"
    if any(word in text for word in ["ржиржорж╕рзНржХрж╛рж░", "рж╣рзНржпрж╛ржБ", "ржирж╛"]) or _is_bengali(text): return "bn-IN"
    if any(word in text for word in ["ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓", "ри╣ри╛риВ", "риири╣рйАриВ"]) or _is_punjabi(text): return "pa-IN"
    if any(word in text for word in ["рмирморм╕рнНрмХрм╛рм░", "рм╣рмБ", "рмирм╛"]) or _is_oriya(text): return "or-IN"
    return "en-IN"

def detect_intent_with_claude(transcript: str, lang: str) -> str:
    """Detects intent using the Claude model via the bedrock_client."""
    print(f"[Claude Intent] Getting intent for: '{transcript}'")
    try:
        # The bedrock_client expects a chat history list of dicts
        chat_history = [{"role": "user", "content": transcript}]
        response = bedrock_client.get_intent_from_text(chat_history)
        
        # The response from the bedrock client is a dictionary, we need to extract the intent.
        # Based on the likely structure, it might be under a key like 'intent'.
        intent = response.get("intent", "unknown")
        print(f"[Claude Intent] Detected intent: {intent}")
        return intent
    except Exception as e:
        print(f"[Claude Intent] тЭМ Error detecting intent with Claude: {e}")
        return "unknown"

def detect_intent_fur(text: str, lang: str) -> str:
    """A fallback intent detection function (a more descriptive name for the original detect_intent)."""
    return detect_intent(text)


def detect_intent(text):
    text = text.lower()
    if any(word in text for word in ["agent", "live agent", "speak to someone", "transfer", "help desk"]): return "agent_transfer"
    if any(word in text for word in ["yes", "yeah", "sure", "okay", "haan", "роЖроорпН", "роЕро╡рпБройрпБ", "рд╣реЙрдВ", "р▓╣р│Мр▓жр│Б", "please"]): return "affirmative"
    if any(word in text for word in ["no", "not now", "later", "nah", "nahi", "роЗро▓рпНро▓рпИ", "роХро╛родрпБ", "р▓ир▓╣р▓┐"]): return "negative"
    if any(word in text for word in ["what", "who", "why", "repeat", "pardon"]): return "confused"
    return "unknown"


# --- Static Files and Templates ---
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="static")

# --- HTML Endpoints ---
@app.get("/", response_class=HTMLResponse)
async def get_dashboard(request: Request):
    """
    Serves the enhanced dashboard HTML file at the root URL.
    """
    return templates.TemplateResponse("enhanced_dashboard.html", {"request": request})

@app.get("/original", response_class=HTMLResponse)
async def get_original_dashboard(request: Request):
    """
    Serves the original dashboard HTML file for backward compatibility.
    """
    return templates.TemplateResponse("index.html", {"request": request})

# --- Exotel Passthru Handler ---
@app.get("/passthru-handler", response_class=PlainTextResponse)
async def handle_passthru(request: Request):
    """
    Handles Exotel's Passthru applet request.
    This is a critical, lightweight endpoint that must respond quickly.
    It receives call data, caches it, and updates the DB.
    """
    print("тЬЕ [CHECKPOINT] /passthru-handler hit")
    
    params = request.query_params
    call_sid = params.get("CallSid")
    custom_field = params.get("CustomField")

    if not call_sid:
        print("тЭМ [ERROR] Passthru handler called without a CallSid.")
        # Still return OK to Exotel to not break their flow, but log the error.
        return "OK"

    print(f"ЁЯУЮ [CHECKPOINT] Passthru: CallSid received: {call_sid}")
    print(f"ЁЯУж [CHECKPOINT] Passthru: CustomField received: {custom_field}")

    # Parse the pipe-separated CustomField
    customer_data = {}
    if custom_field:
        try:
            pairs = custom_field.split('|')
            for pair in pairs:
                if '=' in pair:
                    key, value = pair.split('=', 1)
                    customer_data[key.strip()] = value.strip()
            print(f"ЁЯУК [CHECKPOINT] Passthru: Parsed Custom Fields: {customer_data}")
        except Exception as e:
            print(f"тЭМ [ERROR] Passthru: Failed to parse CustomField: {e}")
            # Log error but continue, as we might have the CallSid
    
    # Get the temporary ID to link sessions
    temp_call_id = customer_data.get("temp_call_id")
    print(f"тД╣я╕П [CHECKPOINT] Passthru: temp_call_id from CustomField: {temp_call_id}")

    # --- Redis Caching ---
    # We now have the official CallSid, let's update/create the Redis session
    if temp_call_id:
        print(f"ЁЯФД [CHECKPOINT] Passthru: Linking session from temp_call_id: {temp_call_id} to new CallSid: {call_sid}")
        redis_manager.link_session_to_sid(temp_call_id, call_sid)
    else:
        print(f"ЁЯУж [CHECKPOINT] Passthru: Creating new Redis session for CallSid: {call_sid}")
        redis_manager.create_call_session(call_sid, customer_data)

    # --- Database Update ---
    try:
        print(f"тЬНя╕П [CHECKPOINT] Passthru: Updating database for CallSid: {call_sid}")
        update_call_status(
            call_sid=call_sid,
            status=CallStatus.INITIATED,
            customer_id=customer_data.get("id"),
            temp_call_id=temp_call_id
        )
        print(f"тЬЕ [CHECKPOINT] Passthru: Database updated successfully for CallSid: {call_sid}")
    except Exception as e:
        print(f"тЭМ [CRITICAL] Passthru: Database update failed for CallSid {call_sid}: {e}")

    # IMPORTANT: Always return "OK" for Exotel to proceed with the call flow.
    print("тЬЕ [CHECKPOINT] Passthru: Responding 'OK' to Exotel.")
    return "OK"

# --- WebSocket Endpoint for Voicebot ---
@app.websocket("/ws/voicebot/{session_id}")
async def websocket_voicebot_endpoint(websocket: WebSocket, session_id: str):
    await websocket.accept()
    print(f"[WebSocket] тЬЕ Connected to Exotel Voicebot Applet for session: {session_id}")

    # Initialize variables from query parameters
    query_params = dict(websocket.query_params)
    temp_call_id = query_params.get('temp_call_id')
    call_sid = query_params.get('call_sid', session_id) # Use session_id as a fallback for call_sid
    phone = query_params.get('phone')

    print(f"[WebSocket] Query params: temp_call_id={temp_call_id}, call_sid={call_sid}, phone={phone}")

    # State variable for the conversation stage
    conversation_stage = "INITIAL_GREETING" # States: INITIAL_GREETING, WAITING_FOR_LANG_DETECT, PLAYING_PERSONALIZED_GREETING, PLAYING_EMI_PART1, PLAYING_EMI_PART2, ASKING_AGENT_CONNECT, WAITING_AGENT_RESPONSE, TRANSFERRING_TO_AGENT, GOODBYE_DECLINE
    call_detected_lang = "en-IN" # Default language, will be updated after first user response
    audio_buffer = bytearray()
    last_transcription_time = time.time()
    interaction_complete = False # Flag to stop processing media after the main flow ends
    customer_info = None # Will be set when we get customer data
    initial_greeting_played = False # Track if initial greeting was played
    agent_question_repeat_count = 0 # Track how many times agent question was repeated

    try:
        while True:
            data = await websocket.receive_text()
            msg = json.loads(data)
            print(f"[WebSocket] ЁЯУи Received message: {msg.get('event', 'unknown')}")

            if msg.get("event") == "start":
                print("[WebSocket] ЁЯФБ Got start event")
                
                # Try to get customer info from multiple sources
                if not customer_info:
                    # 1. Try to get from Redis using temp_call_id or call_sid
                    if temp_call_id:
                        print(f"[WebSocket] Looking up customer data by temp_call_id: {temp_call_id}")
                        redis_data = redis_manager.get_call_session(temp_call_id)
                        if redis_data:
                            customer_info = {
                                'name': redis_data.get('name'),
                                'loan_id': redis_data.get('loan_id'),
                                'amount': redis_data.get('amount'),
                                'due_date': redis_data.get('due_date'),
                                'lang': redis_data.get('language_code', 'en-IN'),
                                'phone': redis_data.get('phone_number', ''),
                                'state': redis_data.get('state', '')
                            }
                            print(f"[WebSocket] тЬЕ Found customer data in Redis: {customer_info['name']}")
                    
                    elif call_sid:
                        print(f"[WebSocket] Looking up customer data by call_sid: {call_sid}")
                        redis_data = redis_manager.get_call_session(call_sid)
                        if redis_data:
                            customer_info = {
                                'name': redis_data.get('name'),
                                'loan_id': redis_data.get('loan_id'),
                                'amount': redis_data.get('amount'),
                                'due_date': redis_data.get('due_date'),
                                'lang': redis_data.get('language_code', 'en-IN'),
                                'phone': redis_data.get('phone_number', ''),
                                'state': redis_data.get('state', '')
                            }
                            print(f"[WebSocket] тЬЕ Found customer data in Redis: {customer_info['name']}")
                    
                    elif phone:
                        print(f"[WebSocket] Looking up customer data by phone: {phone}")
                        # Clean phone number for lookup
                        clean_phone = phone.replace('+', '').replace('-', '').replace(' ', '')
                        phone_key = f"customer_phone_{clean_phone}"
                        redis_data = redis_manager.get_temp_data(phone_key)
                        if redis_data:
                            customer_info = {
                                'name': redis_data.get('name'),
                                'loan_id': redis_data.get('loan_id'),
                                'amount': redis_data.get('amount'),
                                'due_date': redis_data.get('due_date'),
                                'lang': redis_data.get('language_code', 'en-IN'),
                                'phone': redis_data.get('phone_number', ''),
                                'state': redis_data.get('state', '')
                            }
                            print(f"[WebSocket] тЬЕ Found customer data by phone in Redis: {customer_info['name']}")
                
                # 2. Try to parse CustomField data from Exotel start message (if available)
                if not customer_info and 'customField' in msg:
                    print("[WebSocket] Parsing CustomField from Exotel start message")
                    try:
                        custom_field = msg['customField']
                        # Parse the CustomField format: "customer_id=|customer_name=Name|loan_id=LOAN123|..."
                        parts = custom_field.split('|')
                        custom_data = {}
                        for part in parts:
                            if '=' in part:
                                key, value = part.split('=', 1)
                                custom_data[key] = value
                        
                        customer_info = {
                            'name': custom_data.get('customer_name'),
                            'loan_id': custom_data.get('loan_id'),
                            'amount': custom_data.get('amount'),
                            'due_date': custom_data.get('due_date'),
                            'lang': custom_data.get('language_code', 'en-IN'),
                            'phone': '',
                            'state': custom_data.get('state', '')
                        }
                        print(f"[WebSocket] тЬЕ Parsed customer data from CustomField: {customer_info['name']}")
                    except Exception as e:
                        print(f"[WebSocket] тЭМ Error parsing CustomField: {e}")
                
                # 3. Try to get customer data from database by phone number (if available)
                if not customer_info and phone:
                    print(f"[WebSocket] Looking up customer in database by phone: {phone}")
                    try:
                        from database.schemas import get_customer_by_phone
                        session = db_manager.get_session()
                        
                        # Clean phone number for database lookup - more comprehensive approach
                        clean_phone = phone.replace('+', '').replace('-', '').replace(' ', '')
                        
                        # Extract just the 10-digit number if it's an Indian number
                        if len(clean_phone) >= 10:
                            last_10_digits = clean_phone[-10:]
                        else:
                            last_10_digits = clean_phone
                        
                        # Try multiple phone number formats that might be in the database
                        possible_phones = [
                            phone,                      # Original format
                            clean_phone,               # Cleaned format
                            f"+{clean_phone}",         # With + prefix
                            f"+91{last_10_digits}",    # With +91 prefix
                            f"91{last_10_digits}",     # With 91 prefix (no +)
                            last_10_digits             # Just 10 digits
                        ]
                        
                        # Remove duplicates and empty values
                        possible_phones = list(set([p for p in possible_phones if p]))
                        print(f"[WebSocket] Trying phone formats: {possible_phones}")
                        
                        db_customer = None
                        for phone_variant in possible_phones:
                            db_customer = get_customer_by_phone(session, phone_variant)
                            if db_customer:
                                print(f"[WebSocket] тЬЕ Found customer with phone variant: {phone_variant}")
                                break
                        
                        if db_customer:
                            customer_info = {
                                'name': db_customer.name,
                                'loan_id': db_customer.loan_id,
                                'amount': db_customer.amount,
                                'due_date': db_customer.due_date,
                                'lang': db_customer.language_code or 'en-IN',
                                'phone': db_customer.phone_number,
                                'state': db_customer.state or ''
                            }
                            print(f"[WebSocket] тЬЕ Found customer in database: {customer_info['name']} (Phone: {customer_info['phone']})")
                        else:
                            print(f"[WebSocket] тЭМ Customer not found in database for phone: {phone}")
                        
                        session.close()
                    except Exception as e:
                        print(f"[WebSocket] тЭМ Error looking up customer in database: {e}")
                
                # 4. If no customer found anywhere, throw an error instead of using fallback data
                if not customer_info:
                    print("[WebSocket] тЭМ No customer data found - cannot proceed without real customer information")
                    await websocket.send_text(json.dumps({
                        "event": "error",
                        "message": "Customer data not found. Please ensure customer information is uploaded and call is triggered properly."
                    }))
                    return
                
                # 5. Validate customer data has required fields
                required_fields = ['name', 'loan_id', 'amount', 'due_date']
                missing_fields = [field for field in required_fields if not customer_info.get(field)]
                if missing_fields:
                    print(f"[WebSocket] тЭМ Customer data missing required fields: {missing_fields}")
                    await websocket.send_text(json.dumps({
                        "event": "error",
                        "message": f"Customer data incomplete. Missing fields: {', '.join(missing_fields)}"
                    }))
                    return
                
                print(f"[WebSocket] тЬЕ Customer data validated: {customer_info['name']} - Loan: {customer_info['loan_id']}, Amount: тВ╣{customer_info['amount']}")
                
                # Play initial greeting immediately when WebSocket starts (working approach)
                if conversation_stage == "INITIAL_GREETING":
                    print(f"[WebSocket] 1. Playing initial greeting for {customer_info['name']} in {customer_info['lang']}")
                    try:
                        # Use the working template approach
                        await greeting_template_play(websocket, customer_info, lang=customer_info['lang'])
                        print(f"[WebSocket] тЬЕ Initial greeting played successfully in {customer_info['lang']}")
                        initial_greeting_played = True
                        conversation_stage = "WAITING_FOR_LANG_DETECT"
                    except Exception as e:
                        print(f"[WebSocket] тЭМ Error playing initial greeting: {e}")
                        # Try fallback simple greeting
                        try:
                            simple_greeting = f"Hello, this is South India Finvest Bank calling. Am I speaking with {customer_info['name']}?"
                            audio_bytes = await sarvam_handler.synthesize_tts_end(simple_greeting, "en-IN")
                            await stream_audio_to_websocket(websocket, audio_bytes)
                            print("[WebSocket] тЬЕ Fallback greeting sent successfully")
                            initial_greeting_played = True
                            conversation_stage = "WAITING_FOR_LANG_DETECT"
                        except Exception as fallback_e:
                            print(f"[WebSocket] тЭМ Error sending fallback greeting: {fallback_e}")
                continue

            if msg.get("event") == "media":
                payload_b64 = msg["media"]["payload"]
                raw_audio = base64.b64decode(payload_b64)

                if interaction_complete:
                    continue

                if raw_audio and any(b != 0 for b in raw_audio):
                    audio_buffer.extend(raw_audio)
                
                now = time.time()

                if now - last_transcription_time >= BUFFER_DURATION_SECONDS:
                    if len(audio_buffer) == 0:
                        if conversation_stage == "WAITING_FOR_LANG_DETECT":
                            print("[Voicebot] No audio received during language detection stage. Playing 'didn't hear' prompt.")
                            await play_did_not_hear_response(websocket, call_detected_lang)
                            # Reset the timer to wait for user response
                            last_transcription_time = time.time()
                        elif conversation_stage == "WAITING_AGENT_RESPONSE":
                            agent_question_repeat_count += 1
                            if agent_question_repeat_count <= 2:  # Limit to 2 repeats
                                print(f"[Voicebot] No audio received during agent question stage. Repeating question (attempt {agent_question_repeat_count}/2).")
                                await play_agent_connect_question(websocket, call_detected_lang)
                                # Reset the timer to wait for user response
                                last_transcription_time = time.time()
                            else:
                                print("[Voicebot] Too many no-audio responses. Assuming user wants agent transfer.")
                                customer_number = customer_info.get('phone', '08438019383') if customer_info else "08438019383"
                                await play_transfer_to_agent(websocket, customer_number=customer_number) 
                                conversation_stage = "TRANSFERRING_TO_AGENT"
                                interaction_complete = True
                                await websocket.close()
                                print("[WebSocket-TRANSFERRING_TO_AGENT] ЁЯФТ Closed")
                                break
                        audio_buffer.clear()
                        last_transcription_time = now
                        continue

                    try:
                        transcript = sarvam_handler.transcribe_from_payload(audio_buffer)
                        print(f"[Sarvam ASR] ЁЯУЭ Transcript: {transcript}")

                        if transcript:
                            if conversation_stage == "WAITING_FOR_LANG_DETECT":
                                call_detected_lang = detect_language(transcript)
                                print(f"[Voicebot] 2. Detected Language: {call_detected_lang}")
                                print(f"[Voicebot] Original language from CSV: {customer_info.get('lang', 'en-IN')}")
                                
                                # Check if detected language is different from CSV language
                                if call_detected_lang != customer_info.get('lang', 'en-IN') and initial_greeting_played:
                                    print(f"[Voicebot] Language mismatch detected. Replaying greeting in {call_detected_lang}")
                                    try:
                                        await greeting_template_play(websocket, customer_info, lang=call_detected_lang)
                                        print(f"[Voicebot] тЬЕ Replayed greeting in {call_detected_lang}")
                                    except Exception as e:
                                        print(f"[Voicebot] тЭМ Error replaying greeting: {e}")
                                
                                # Play EMI details in detected language
                                try:
                                    await play_emi_details_part1(websocket, customer_info or {}, call_detected_lang)
                                    await play_emi_details_part2(websocket, customer_info or {}, call_detected_lang)
                                    await play_agent_connect_question(websocket, call_detected_lang)
                                    conversation_stage = "WAITING_AGENT_RESPONSE"
                                    print(f"[Voicebot] тЬЕ EMI details and agent question sent successfully in {call_detected_lang}")
                                except Exception as e:
                                    print(f"[Voicebot] тЭМ Error playing EMI details: {e}")
                            
                            elif conversation_stage == "WAITING_AGENT_RESPONSE":
                                # Use Claude for intent detection
                                try:
                                    intent = detect_intent_with_claude(transcript, call_detected_lang)
                                    print(f"[Voicebot] Claude detected intent: {intent}")
                                except Exception as e:
                                    print(f"[Voicebot] тЭМ Error in Claude intent detection: {e}")
                                    # Fallback to keyword-based detection
                                    intent = detect_intent_fur(transcript, call_detected_lang)
                                    print(f"[Voicebot] Fallback intent detection: {intent}")

                                if intent == "affirmative" or intent == "agent_transfer":
                                    if conversation_stage != "TRANSFERRING_TO_AGENT":  # Prevent multiple transfers
                                        print("[Voicebot] User affirmed agent transfer. Initiating transfer.")
                                        customer_number = customer_info.get('phone', '08438019383') if customer_info else "08438019383"
                                        await play_transfer_to_agent(websocket, customer_number=customer_number) 
                                        conversation_stage = "TRANSFERRING_TO_AGENT"
                                        interaction_complete = True
                                        await websocket.close()
                                        print("[WebSocket-TRANSFERRING_TO_AGENT] ЁЯФТ Closed")
                                        break
                                    else:
                                        print("[Voicebot] тЪая╕П Agent transfer already in progress, ignoring duplicate request")
                                elif intent == "negative":
                                    if conversation_stage != "GOODBYE_DECLINE":  # Prevent multiple goodbyes
                                        print("[Voicebot] User declined agent transfer. Saying goodbye.")
                                        await play_goodbye_after_decline(websocket, call_detected_lang)
                                        conversation_stage = "GOODBYE_DECLINE"
                                        interaction_complete = True
                                    else:
                                        print("[Voicebot] тЪая╕П Goodbye already sent, ignoring duplicate request")
                                else:
                                    agent_question_repeat_count += 1
                                    if agent_question_repeat_count <= 2:  # Limit to 2 repeats
                                        print(f"[Voicebot] Unclear response to agent connect. Repeating question (attempt {agent_question_repeat_count}/2).")
                                        await play_agent_connect_question(websocket, call_detected_lang)
                                        # Reset the timer to wait for user response
                                        last_transcription_time = time.time()
                                    else:
                                        print("[Voicebot] Too many unclear responses. Assuming user wants agent transfer.")
                                        customer_number = customer_info.get('phone', '08438019383') if customer_info else "08438019383"
                                        await play_transfer_to_agent(websocket, customer_number=customer_number) 
                                        conversation_stage = "TRANSFERRING_TO_AGENT"
                                        interaction_complete = True
                                        await websocket.close()
                                        print("[WebSocket-TRANSFERRING_TO_AGENT] ЁЯФТ Closed")
                                        break
                            # Add more elif conditions here for additional conversation stages if your flow extends
                    except Exception as e:
                        print(f"[Voicebot] тЭМ Error processing transcript: {e}")

                    audio_buffer.clear()
                    last_transcription_time = now

    except Exception as e:
        print(f"[WebSocket Error] тЭМ {e}")
    finally:
        # Ensure the websocket is closed gracefully
        if not websocket.client_state.name == 'DISCONNECTED':
            await websocket.close()
        print("[WebSocket] ЁЯФТ Closed")


# --- API Endpoints for Dashboard ---

class CustomerData(BaseModel):
    name: str
    phone: str
    loan_id: str
    amount: str
    due_date: str
    state: str
    language_code: str

@app.post("/api/upload-customers")
async def upload_customers(file: UploadFile = File(...)):
    """
    Accepts a CSV or Excel file, processes it, and stores customer data in the database.
    """
    return await call_service.upload_and_process_customers(await file.read(), file.filename)

@app.post("/api/trigger-single-call")
async def trigger_single_call(customer_id: str = Body(..., embed=True)):
    """
    Triggers a single call to a customer by their ID.
    """
    return await call_service.trigger_single_call(customer_id)

@app.post("/api/trigger-bulk-calls")
async def trigger_bulk_calls(customer_ids: list[str] = Body(..., embed=True)):
    """
    Triggers calls to a list of customers by their IDs.
    """
    return await call_service.trigger_bulk_calls(customer_ids)

@app.get("/api/customers")
async def get_all_customers():
    """
    Retrieves all customers from the database.
    """
    session = db_manager.get_session()
    try:
        customers = session.query(Customer).all()
        return [
            {
                "id": str(c.id),
                "name": c.name,
                "phone_number": c.phone_number,
                "language_code": c.language_code,
                "loan_id": c.loan_id,
                "amount": c.amount,
                "due_date": c.due_date,
                "state": c.state,
                "created_at": c.created_at.isoformat()
            } for c in customers
        ]
    finally:
        session.close()

@app.post("/exotel-webhook")
async def exotel_webhook(request: Request):
    """
    Handles Exotel status webhooks for call status updates.
    """
    try:
        # Get the form data from Exotel webhook
        form_data = await request.form()
        call_sid = form_data.get("CallSid")
        call_status = form_data.get("CallStatus")
        call_duration = form_data.get("CallDuration") 
        
        print(f"ЁЯУЮ [WEBHOOK] Received Exotel webhook:")
        print(f"   CallSid: {call_sid}")
        print(f"   CallStatus: {call_status}")
        print(f"   CallDuration: {call_duration}")
        print(f"   All form data: {dict(form_data)}")
        
        if call_sid:
            # Update call status in database
            session = db_manager.get_session()
            try:
                call_session = get_call_session_by_sid(session, call_sid)
                if call_session:
                    # Map Exotel status to internal status
                    status_mapping = {
                        'ringing': 'ringing',
                        'in-progress': 'in_progress', 
                        'completed': 'completed',
                        'busy': 'busy',
                        'no-answer': 'no_answer',
                        'failed': 'failed',
                        'canceled': 'failed'
                    }
                    
                    internal_status = status_mapping.get(call_status.lower(), call_status)
                    
                    # Update call session
                    update_call_status(
                        session, 
                        call_sid, 
                        internal_status,
                        f"Exotel webhook: {call_status}",
                        extra_data={'webhook_data': dict(form_data)}
                    )
                    
                    print(f"тЬЕ [WEBHOOK] Updated call {call_sid} status to: {internal_status}")
                else:
                    print(f"тЪая╕П [WEBHOOK] Call session not found for SID: {call_sid}")
                    
            finally:
                session.close()
        
        return {"status": "success", "message": "Webhook processed"}
        
    except Exception as e:
        print(f"тЭМ [WEBHOOK] Error processing webhook: {e}")
        return {"status": "error", "message": str(e)}

# This is a catch-all for the old websocket endpoint, redirecting or handling as needed.
@app.websocket("/stream")
async def old_websocket_endpoint(websocket: WebSocket):
    """
    Handles the old /stream endpoint.
    For now, it will just accept and close the connection with a message.
    """
    await websocket.accept()
    print("[Compatibility] Old /stream endpoint connected. This is deprecated.")
    await websocket.close(code=1008, reason="Endpoint /stream is deprecated. Use /ws/voicebot/{session_id}")

# --- WebSocket Endpoint for Dashboard ---
@app.websocket("/ws/dashboard/{session_id}")
async def websocket_dashboard_endpoint(websocket: WebSocket, session_id: str):
    await websocket.accept()
    print(f"Dashboard connected: {session_id}")
    try:
        while True:
            # This loop will keep the connection alive.
            # We can add logic here later to handle messages from the dashboard.
            await websocket.receive_text()
    except WebSocketDisconnect:
        print(f"Dashboard disconnected: {session_id}")

if __name__ == "__main__":
    print("Starting server directly from main.py")
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)